/***************************************************************************
 * This file is generated by "buildPages v0.1"
 * Do not edit this file, it will be overwritten by the pageBuilder script.
 * The buildPages module is part of the PLibESPV1 project.
 * Build date: 2025-08-30T15:39:34.899Z
 * Build context: DewPoint-Monitor
 ***************************************************************************/

/**
  @PageBuilder:register(StatusPage,CStatusPage)
 */

class CStatusPage extends CPageHandler {
    /**
     * 
     * @param {CAPP} oApp 
     */
    constructor(oApp) {
        // don't use this, before initialized !
        super("status",new CElement("#StatusPage"),oApp.Config);
        this._App = oApp;
       // this.Translator = new CTranslator();
    }

    /**
     * 
     * @param {*} pView 
     * @param {*} pApp 
     * @returns 
     * @overload
     */
    loadPageConfig(pView, pApp) {
        let oStatus = pApp.DeviceStatus;
       
        // set the root element infos - no prefix...
        this.setConfigValues(pView,oStatus);
        for(let strName in oStatus) {
            let oData = oStatus[strName];
            if(oData && Utils.isObj(oData)) {
                this.setConfigValues(pView,oData,strName);
            }
        }

        let oVars = new CVarTable();
        oVars.setVars(pApp.tVars);
        oVars.setVars(oStatus);
        
        // now the usage bar
        let nAvailableSize = oStatus.flash_size - oStatus.fs_total;
        let nPercentUsed = (oStatus.sketch_size * 100) / nAvailableSize;
        let oUsageBar =  pView.sel("#flashUsage");
        if(oUsageBar) {
            oVars.setVar("flash_used_percent",~~nPercentUsed);
            oVars.setVar("flash_available",nAvailableSize);
            oUsageBar.style.width = nPercentUsed + "%";
            oUsageBar.innerText = ~~(oStatus.sketch_size / 1024) + " KB";
            let oUB = EC(oUsageBar);
            let oTranse = new CTranslator();
            let strI18n = "Status.memOK";
            if(nPercentUsed > 50) {
                oUB.rc("usageOK").ac("usageWarn");
                strI18n = "Status.memWarn";
            } else {
                oUB.ac("usageOK").rc("usageWarn");
            }
            oTranse.translateI18n(strI18n,undefined,oVars)
                .then(str => { 
                    oUB.attr("title",str)
                }
            )
        }
        return(oStatus);
    }

}/**
  @PageBuilder:register(InfoPage,CInfoPage)
 */

class CInfoPage extends CPageHandler {
    /**
     * 
     * @param {CAPP} oApp 
     */
    constructor(oApp) {
        // don't use this, before initialized !
        super("info",new CElement("#InfoPage"),oApp.Config);
        this._App = oApp;
       // this.Translator = new CTranslator();
    }

    _createThermo(oBaseElement, oData) {
        let oParent = CElement.asInstance(oBaseElement);
        oParent.html(""); 
        let oThermo = oParent.cce("div").ac("thermo");
        let oGlas   = oThermo.cce("div").ac("thermo-glas");
        let oLiquid = oGlas.cce("div").ac("thermo-liquid");
        let oLabel  = oThermo.cce("div").ac("thermo-label");
        if(oData.label) oLabel.setText(oData.label)
        oLiquid.getBase().style.height = oData.height;
        switch(oData.type) {
            case "T" :  oLiquid.ac("thermo-temp");
                        break;
            case "H" : oLiquid.ac("thermo-humidity");
                        break;
        }
        oGlas.ac("thermo-glas-active");
        return(oThermo);
    }

    calcDisplayPercent(fData, fMin = -20, fRange = 60) {
        return(((fData - fMin) * 100 / fRange).toFixed() + "%")
    }

    /**
     * 
     * @param {*} pView 
     * @param {*} pApp 
     * @returns 
     * @overload
     */
    loadPageConfig(pView, pApp) {
        let oStatus = pApp.DeviceStatus.dewswitch;
        let oID = pApp.DeviceStatus.sensorID ?? {};
        let oOD = pApp.DeviceStatus.sensorOD ?? {};
        
        let nMaxTemp = 80;
        let nMinTemp = -20; 
        let nTempRange = 60;
        let nDefaultTemp = nMinTemp;
        let nDefaultHum = 0;
        this._createThermo(pView.gel("#intTemp"), {
            type: "T",
            label: (oID.temp_c ? oID.temp_c.toFixed(1) : "--")  + "°",
            height: this.calcDisplayPercent((oID.temp_c ?? nDefaultTemp),nMinTemp,nTempRange)
        })
        this._createThermo(pView.gel("#intHumidity"), {
            type: "H",
            label: (oID.hum ?? nDefaultHum).toFixed(1) + "%",
            height: this.calcDisplayPercent((oID.hum ?? nDefaultHum),0,100)
        })
        this._createThermo(pView.gel("#extTemp"), {
            type: "T",
            label: (oOD.temp_c ? oOD.temp_c.toFixed(1) : "--.-")  + "°",
            height: this.calcDisplayPercent((oOD.temp_c ?? nDefaultTemp),nMinTemp,nTempRange)
        })
        this._createThermo(pView.gel("#extHumidity"), {
            type: "H",
           label: (oOD.hum ?? nDefaultHum).toFixed(1) + "%",
            height: this.calcDisplayPercent((oOD.hum ?? nDefaultHum),0,100)
        })
        pView.gel("#dewPointID").html((oID.dew_point ?? 0).toFixed(1) + "°C" );
        pView.gel("#tempID").html((oID.temp_c ?? 0).toFixed(1) + "°C" );
        pView.gel("#humID").html((oID.hum ?? 0).toFixed() + "%" );

        pView.gel("#dewPointOD").html((oOD.dew_point ?? 0).toFixed(1) + "°C" );
        pView.gel("#tempOD").html((oOD.temp_c ?? 0).toFixed(1) + "°C" );
        pView.gel("#humOD").html((oOD.hum ?? 0).toFixed() + "%" );

        return(oStatus);
    }

}/**
 * The System Page with Restart / Reset
 * 
 * @PageBuilder:register(SystemPage,CSystemPage)
 */
class CSystemPage extends CPageHandler {
    constructor(oApp) {
        super("system",EC("#SystemPage"),oApp.Config);
        this._App = oApp;
        this.Transe = new CTranslator();
    }

    async restartDevice() {
        let strAsk = await this.Transe.getKeyData("System.Restart.confirm");
        if (confirm(strAsk ?? "restart ?")) {
            this._App.restartDevice();
            let oDlg = new CWaitDialog({
                title: "i18n:System.Restart.title",
                title: "i18n:System.Restart.waitmsg",
                onFinished: function() { location.href = location.href; }
            });
            oDlg.showModal();
        }
    }

    async resetDevice() {
        let strAsk = await this.Transe.getKeyData("System.Reset.confirm");
        if (confirm(strAsk ?? "reset ?")) {
            this._App.resetDevice();
            let oDlg = new CWaitDialog({
                title: "i18n:System.Reset.title",
                title: "i18n:System.Reset.waitmsg",
                onFinished: function() { location.href = location.href; }
            });
            oDlg.showModal();
        }
    }

    on(pView, oElement) {
        if(Utils.isElement(oElement)) {
            switch(oElement.id) {
                case "restart": this.restartDevice(); break;
                case "reset":   this.resetDevice(); break;
            }
        }
    }
}/**
 * Represents a WiFi Setting page
 * 
 * @PageBuilder:register(WiFiPage,CWiFiPage) 
 */
class CWiFiPage extends CPageHandler {
    /**
     * 
     * @param {CAPP} oApp 
     */
    constructor(oApp) {
        // don't use this, before initialized !
        super("wifi",new CElement("#WiFiPage"),oApp.Config);
        this._App = oApp;
       // this.Translator = new CTranslator();
    }

    /**
     * catch the useWiFiBtn click event from the scan dialog to insert the selected network.
     * @param {CView} pView 
     * @param {HTMLElement} oElement 
     * @param {string} strCmd 
     */
    on(pView,oElement,strCmd) {
        super.on(pView,oElement);
        if(Utils.isElement(oElement) && oElement.id == "useWifiBtn") {
            let oSource = pView.selById("scan_ssid");
            let oSelected = oSource.options[oSource.selectedIndex];
            if(oSelected) {
                pView.sel("[data-cfg = 'ssid']").value  = oSelected.value;
                pView.sel("[data-cfg = 'bssid']").value = oSelected.bssidvalue; 
            }
            this.closeDialog(pView,oElement);
        }
    }

    /**
     * listen on the web socket message and check if the message is a "ssidlist" message.
     * @param {CView} pView 
     * @param {object} oMsg 
     */
    onSocketMessage(pView, oMsg) {
        if(oMsg && oMsg.data == "ssidlist") {
            this.insertFoundNetworks(oMsg.payload);
        }
    }

    /**
     * display the scan network dialog.
     * @param {CView} pView 
     * @param {HTMLElement} oElement
     */
    showScanDialog(pView,oElement) {
        let oThis = this;
        let oDlg = new CDialog("#scanWiFiDialog", { cancelBtn:true });
        // Reset to scan start....
        try { oDlg.sel(".dialogHeader").dataset.i18n = "WiFi.scan.title"; } catch {}
        try { oDlg.sel("#scan_ssid").innerHTML = ""; } catch {}
        this._App.Translator.translate(oDlg.getBase())
            .then(e => {
                oDlg.showModal();
                oThis._App.sendSocketCommand(DEFAULTS.SCAN_WIFI);
            });
    }

    /**
     * insert the found (scanned) networks into the select element.
     * @param {*} oListOfSSIDs 
     */
    insertFoundNetworks(oListOfSSIDs) {
        let oDlg = new CDialog("#scanWiFiDialog");
        let oSelect = oDlg.sel("#scan_ssid");
        try { oDlg.sel(".dialogHeader").dataset.i18n = "WiFi.scan.titleDone"; } catch {}
        this._App.Translator.translate(oDlg.getBase())
            .then(e => {
                for(let i=0; i < oListOfSSIDs.length; i++) {
                    let x = parseInt(oListOfSSIDs[i].rssi);
                    let nPercent = Math.min(Math.max(2 * (x + 100), 0), 100);
                    let oOpt = document.createElement("option");
                    oOpt.value = oListOfSSIDs[i].ssid;
                    oOpt.bssidvalue = oListOfSSIDs[i].bssid;
                    oOpt.innerHTML = oListOfSSIDs[i].ssid + " (" + nPercent + "%) - " + oListOfSSIDs[i].bssid ;
                    oSelect.appendChild(oOpt);
                }
            });
        
        
    }
}

/**
 * Page Handler class for Backup / Restore Page
 * 
 * @PageBuilder:register(BackupPage,CBackupPage)
 */

class CBackupPage extends CPageHandler {
    constructor(oApp) {
        super("backup",document.getElementById("BackupPage"),oApp.Config)
        this._oApp = oApp;
    }

     /**
     * catch the button click events.
     * @param {*} oContent 
     * @param {*} oElement 
     * @param {*} strCmd 
     */
    on(oContent,oElement,strCmd) {
        super.on(oContent,oElement);
        // Backup requested ? - ask the device for a backup file... (catch the result...)
        if(Utils.isElement(oElement)) {
            switch(oElement.id) {
                case "backupSet": 
                    this._oApp.sendSocketCommand(DEFAULTS.GET_BACKUP_COMMAND);
                    break;
                case "restoreSet": 
                    let oAlert = new CAlertDialog({ title: "i18n:SysCfg.Restore.title"})
                    if ("files" in oElement) {
                        if (oElement.files.length === 0) {
                            oAlert.showModal({ body: "i18n:main.noFileSelected"});
                            // alert("You did not select file to restore!");
                        } else {
                            let oReader = new FileReader();
                            oReader.onload = function() {
                                try {
                                    let oConfigData = JSON.parse(oReader.result);
                                    // Check if structure could be a config file...
                                    if (oConfigData.wifi && oConfigData.wifi.hasOwnProperty("ap_mode")) {
                                        if (confirm("File seems to be valid, do you wish to continue?")) {
                                            this.m_oAPP.WS.sendCommandMessage(RESTORE_BACKUP_COMMAND,"",oConfigData);
                                        }
                                    } else {
                                        oAlert.showModal({body: "i18n:SysCfg.Restore.invalidFile"});
                                        // alert("Not a valid backup file!");
                                    }
                                } catch (e) {
                                    oAlert.showModal({body: "i18n:SysCfg.Restore.invalidFile"});
                                    // alert("Invalid backup file!");
                                return;
                                }
        
                            };
                            oReader.readAsText(oElement.files[0]);
                        }
                    }    
                    break;
            }
        }
    }
    
     /**
     * listen on the socket message and check if the message is a "ssidlist" message.
     * @param {*} pView 
     * @param {*} oMsg 
     */
    onBackupMessageReceived(pView, oMsg) {
        if(oMsg) {
            switch(oMsg.data) {
                case "config":  // A backup request for config received...
                    // Simulate a download click...
                    let oDataObj = oMsg.payload;
                    let strData =  "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(oDataObj, null, 2));
                    let dlAnchorElem = pView.selById("downloadSet");
                    dlAnchorElem.setAttribute("href", strData);
                    dlAnchorElem.setAttribute("download", `${this._oApp.Vars.getValue("prog_name")} - settings.json`);
                    dlAnchorElem.click();
                    break;
            }
        }
    }
}/**
 * Firmware Download / Install page
 * 
 * @PageBuilder:register(FirmwarePage,CFirmwarePage)
 */
class CFirmwarePage extends CPageHandler {
    _fwInstTime = 30;   // Time needed to install firmware..
    constructor(oApp) {
        super("firmware",EC("#FirmwarePage"),oApp.Config);
        this._App = oApp;
        
    }

    loadPageConfig(pView, pApp) {
        super.loadPageConfig(pView,pApp);
        EC("#fwSelect").on("change",this.onFile.bind(this));
        let strURL = pApp.Settings.getData("app.latest.url");
        fetch(strURL)
            .then((response) => {
                return response.json();
            })
            .then((oRelease) => {
                let oAsset = oRelease.assets[0];
                let oDTCreated = new Date(oAsset.created_at);
                let oDTUpdated = new Date(oAsset.updated_at)
                pView.sel("#Date").textContent = oDTCreated.toLocaleDateString() + " / " + oDTUpdated.toLocaleDateString();
                pView.sel("#Name").textContent = oRelease.name;
                pView.sel("#Version").textContent = oRelease.tag_name;
                pView.sel("#Desc").innerHTML = oRelease.body.replaceAll("\n","<br/>");
                pView.gel("#downloadupdate").attr("href",oAsset.browser_download_url);
                pView.sel("#download").disabled = false;
            })
            .catch(ex => {
            });

    }
    onFile(oEvt) {
        EC("#fwInstall").getBase().disabled = false;
    }

    on(pView, oElement) {
        if(oElement) {
            switch(oElement.id) {

                case 'download':
                    // A firmware download was clicked, trigger the download...
                    pView.sel("#downloadupdate").click();
                    break;

                case 'fwSelect':
                    // A Firnware was selected, enable the install button
                    let oFW = pView.sel('#fwInstall');
                    oFW.disabled = false;
                    break;

                case 'fwInstall':
                    // Install the selected Firmware file
                    let formData = new FormData();
                    formData.append("bin", pView.sel("#fwSelect").files[0]);
                    let oDlg = new CWaitDialog({
                        title: "installing firmware - please wait",
                        timeOutSecs: this._fwInstTime,
                        onFinished: function() { location.href = location.href; }
                    });
                    oDlg.showModal();
                    fetch('/update',{ method:'POST', formData })
                    break;
            }
        }
    }

}
// Page Handler Registration
function registerPageHandler(pApp) {
    pApp.registerPageHandler("StatusPage",new CStatusPage(pApp));
    pApp.registerPageHandler("InfoPage",new CInfoPage(pApp));
    pApp.registerPageHandler("SystemPage",new CSystemPage(pApp));
    pApp.registerPageHandler("WiFiPage",new CWiFiPage(pApp));
    pApp.registerPageHandler("BackupPage",new CBackupPage(pApp));
    pApp.registerPageHandler("FirmwarePage",new CFirmwarePage(pApp));
}

// End of Page Handler Registration
